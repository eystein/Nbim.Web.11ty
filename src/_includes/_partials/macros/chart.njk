{%- macro chart(params) -%}

{#
Parameters received by this partial:

chart
  type
  optionsYAxis
  showFilter
  buttonHeader
  buttonActiveText
  buttonsInactive
  extras
    status
    showAsTableTextOff
    showAsTableTextOn
    downloadXLSText
  sourceText
  id1
    id
    value
    series
    options
  id2
    id
    value
    series
    options
#}

{% if params.chart.id2.id %}
  <div class="m-b-20">
    <div class="radio-button-group">
      <fieldset>
        <legend class="visually-hidden">Currency</legend>
        <label for="currency-{{ params.chart.id1.id | safe }}" class="radio-button">
          <input
            id="currency-{{ params.chart.id1.id | safe }}"
            type="radio" name="currency"
            value="{{ params.chart.id1.value | safe }}"
            checked
          />
          <i class="radio-button__indicator"></i>
          {{ params.chart.id1.value | safe }}
        </label>
        <label for="currency-{{ params.chart.id2.id | safe }}" class="radio-button">
          <input
            id="currency-{{ params.chart.id2.id | safe }}"
            type="radio" name="currency"
            value="{{ params.chart.id2.value | safe }}"
          />
          <i class="radio-button__indicator"></i>
          {{ params.chart.id2.value | safe }}
        </label>
      </fieldset>
    </div>
  </div>
{% endif %}

<div id="{{ params.chart.id1.id | safe }}" class="chartContainer{% if params.classes %} {{ params.classes | safe }}{% endif %}" styles="height: {% if params.chart.height %}{{ params.chart.height | safe }}{% else %}600{% endif %}px"></div>
{% if params.chart.showFilter %}
  <div id="{{ params.chart.id1.id | safe }}__buttons"></div>
{% endif %}

{% if params.chart.id2.id %}
  <div id="{{ params.chart.id2.id | safe }}" class="chartContainer{% if params.classes %} {{ params.classes | safe }}{% endif %} hide" styles="height: {% if params.chart.height %}{{ params.chart.height | safe }}{% else %}600{% endif %}px"></div>
  {% if params.chart.showFilter %}
    <div id="{{ params.chart.id2.id | safe}}__buttons"></div>
  {% endif %}
{% endif %}

{% if params.chart.sourceText %}
  <div id="{{ params.chart.id1.id | safe }}__source-text">{{ params.chart.sourceText | safe }}</div>
  {% if params.chart.id2.id %}
    <div id="{{ params.chart.id2.id | safe }}__source-text" class="hide">{{ params.chart.sourceText | safe }}</div>
  {% endif %}
{% endif %}

{% if params.chart.extras.status %}
  <div id="{{ params.chart.id1.id | safe }}__extras" class="m-t-30"></div>
  {% if params.chart.id2.id %}
    <div id="{{ params.chart.id2.id | safe }}__extras" class="m-t-30 hide"></div>
  {% endif %}
{% endif %}

<script>
  document.addEventListener("DOMContentLoaded", function(event) {
      function waitForResources() {
        // Use a timeout id to identify your process and purge it when it's no longer needed
        let timeoutID;
        // Check if all needed resources are defined, in this case by checking their type
        if (
          typeof renderChart === 'function'
        ) {
          // We no longer need to wait, purge the timeout id
          window.clearTimeout(timeoutID);
          // All needed resources are defined
          renderChart({
            height: '{{ params.chart.height | safe }}',
            buttonActiveText: '{{ params.chart.buttonActiveText | safe }}',
            buttonHeader: '{{ params.chart.buttonHeader | safe }}',
            buttonsInactive: '{{ params.chart.buttonsInactive | safe }}',
            id1: {
              id: '{{ params.chart.id1.id | safe }}',
              series: '{{ params.chart.id1.series | safe }}',
              options: '{{ params.chart.id1.options | safe }}',
            },
            id2: {
              id: '{{ params.chart.id2.id | safe }}',
              series: '{{ params.chart.id2.series | safe }}',
              options: '{{ params.chart.id2.options | safe }}',
            },
            optionsYAxis: '{{ params.chart.optionsYAxis | safe }}',
            extras: {
              status: '{{ params.chart.extras.status | safe }}',
              showAsTableTextOff: '{{ params.chart.extras.showAsTableTextOff | safe }}',
              showAsTableTextOn: '{{ params.chart.extras.showAsTableTextOn | safe }}',
              downloadXLSText: '{{ params.chart.extras.downloadXLSText | safe }}',
            },
            type: '{{ params.chart.type | safe }}',
          });
        } else {
          // All (or some) needed resources are undefined, try again in 0.25 secs
          timeoutID = window.setTimeout(waitForResources, 250);
          if (typeof renderChart !== 'function') {
            console.warn('[waitForResources] renderChart is not defined');
          }
        }
      };
      waitForResources();
  });

  /*

  EKSEMPLER PÅ DATA VI FORVENTER OG FORMATTERING
 
  // The 'options' object should be passed when we want to override default option values.
  // Some sensible values are set by default for each chart type.

  const options = {
    legend: {
      enabled: false
    }
  }

  // The 'buttonsInactive' object should be passed with the values for each filter button.
  // 'text' represents the text on the filter button.
  // 'value' represents the number of years the timeline will be sliced to.

  const buttonsInactive = [
    {
      text: 'Siste år',
      value: '2',
    },
    {
      text: '5 år',
      value: '6',
    },
    {
      text: '10 år',
      value: '11',
    },
    {
      text: '15 år',
      value: '16',
    },
  ];

  // The 'series' array is an array of objects that contain the data passed to
  // both 'x' and 'y' axis. The formatting may vary for each chart type.

  const series = [
    {
      name: 'Equity investments',
      data: [
        [Date.UTC(1998, 11, 31), 70],
        [Date.UTC(1999, 11, 31), 94],
        [Date.UTC(2000, 11, 31), 153],
        [Date.UTC(2001, 11, 31), 246],
        [Date.UTC(2002, 11, 31), 231],
        [Date.UTC(2003, 11, 31), 361],
        [Date.UTC(2004, 11, 31), 416],
        [Date.UTC(2005, 11, 31), 582],
        [Date.UTC(2006, 11, 31), 726],
        [Date.UTC(2007, 11, 31), 958],
        [Date.UTC(2008, 11, 31), 1129],
        [Date.UTC(2009, 11, 31), 1644],
        [Date.UTC(2010, 11, 31), 1891],
        [Date.UTC(2011, 11, 31), 1945],
        [Date.UTC(2012, 11, 31), 2336],
        [Date.UTC(2013, 11, 31), 3107],
        [Date.UTC(2014, 11, 31), 3940],
        [Date.UTC(2015, 11, 31), 4572],
        [Date.UTC(2016, 11, 31), 4692],
        [Date.UTC(2017, 11, 31), 5653],
        [Date.UTC(2018, 11, 31), 5477],
        [Date.UTC(2019, 11, 31), 6186],
      ],
      color: '#2c7399',
      showInLegend: true,
      index: 3,
    },
    {
      name: 'Fixed-income investments',
      data: [
        [Date.UTC(1998, 11, 31), 102],
        [Date.UTC(1999, 11, 31), 129],
        [Date.UTC(2000, 11, 31), 227],
        [Date.UTC(2001, 11, 31), 363],
        [Date.UTC(2002, 11, 31), 378],
        [Date.UTC(2003, 11, 31), 484],
        [Date.UTC(2004, 11, 31), 600],
        [Date.UTC(2005, 11, 31), 817],
        [Date.UTC(2006, 11, 31), 1058],
        [Date.UTC(2007, 11, 31), 1061],
        [Date.UTC(2008, 11, 31), 1146],
        [Date.UTC(2009, 11, 31), 996],
        [Date.UTC(2010, 11, 31), 1186],
        [Date.UTC(2011, 11, 31), 1356],
        [Date.UTC(2012, 11, 31), 1455],
        [Date.UTC(2013, 11, 31), 1879],
        [Date.UTC(2014, 11, 31), 2350],
        [Date.UTC(2015, 11, 31), 2668],
        [Date.UTC(2016, 11, 31), 2577],
        [Date.UTC(2017, 11, 31), 2616],
        [Date.UTC(2018, 11, 31), 2533],
        [Date.UTC(2019, 11, 31), 2505],
      ],
      color: '#7bb6ce',
      showInLegend: true,
      index: 2,
    },
    {
      name: 'Real estate investments',
      data: [
        [Date.UTC(1998, 11, 31), 0],
        [Date.UTC(1999, 11, 31), 0],
        [Date.UTC(2000, 11, 31), 0],
        [Date.UTC(2001, 11, 31), 0],
        [Date.UTC(2002, 11, 31), 0],
        [Date.UTC(2003, 11, 31), 0],
        [Date.UTC(2004, 11, 31), 0],
        [Date.UTC(2005, 11, 31), 0],
        [Date.UTC(2006, 11, 31), 0],
        [Date.UTC(2007, 11, 31), 0],
        [Date.UTC(2008, 11, 31), 0],
        [Date.UTC(2009, 11, 31), 0],
        [Date.UTC(2010, 11, 31), 0],
        [Date.UTC(2011, 11, 31), 11],
        [Date.UTC(2012, 11, 31), 25],
        [Date.UTC(2013, 11, 31), 52],
        [Date.UTC(2014, 11, 31), 141],
        [Date.UTC(2015, 11, 31), 235],
        [Date.UTC(2016, 11, 31), 242],
        [Date.UTC(2017, 11, 31), 219],
        [Date.UTC(2018, 11, 31), 246],
        [Date.UTC(2019, 11, 31), 247],
      ],
      color: '#a4acb1',
      showInLegend: true,
      index: 1,
    },
    {
      name: 'Total market value',
      data: [
        [Date.UTC(1998, 11, 31), 172],
        [Date.UTC(1999, 11, 31), 222],
        [Date.UTC(2000, 11, 31), 386],
        [Date.UTC(2001, 11, 31), 614],
        [Date.UTC(2002, 11, 31), 609],
        [Date.UTC(2003, 11, 31), 845],
        [Date.UTC(2004, 11, 31), 1016],
        [Date.UTC(2005, 11, 31), 1399],
        [Date.UTC(2006, 11, 31), 1784],
        [Date.UTC(2007, 11, 31), 2019],
        [Date.UTC(2008, 11, 31), 2275],
        [Date.UTC(2009, 11, 31), 2640],
        [Date.UTC(2010, 11, 31), 3077],
        [Date.UTC(2011, 11, 31), 3312],
        [Date.UTC(2012, 11, 31), 3816],
        [Date.UTC(2013, 11, 31), 5038],
        [Date.UTC(2014, 11, 31), 6431],
        [Date.UTC(2015, 11, 31), 7475],
        [Date.UTC(2016, 11, 31), 7510],
        [Date.UTC(2017, 11, 31), 8488],
        [Date.UTC(2018, 11, 31), 8256],
        [Date.UTC(2019, 11, 31), 8938],
      ],
      color: '#643264',
      showInLegend: true,
      type: 'line',
      index: 4,
    },
  ];

*/

</script>

{%- endmacro -%}
